/*
 * /* This Java source file was generated by the Gradle 'init' task.
 */
package QKART_SANITY_LOGIN.Module1;

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.remote.BrowserType;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class QkartSanity {

    public static String lastGeneratedUserName;

    public static RemoteWebDriver createDriver() throws MalformedURLException {
        // Launch Browser using Zalenium
        //http://localhost:8082/wd/hub
        final DesiredCapabilities capabilities = new DesiredCapabilities();
        capabilities.setBrowserName(BrowserType.CHROME);
        RemoteWebDriver driver =
                new RemoteWebDriver(new URL("http://localhost:8082/wd/hub"), capabilities);

        return driver;
    }

    public static void logStatus(String type, String message, String status) {

        System.out.println(String.format("%s |  %s  |  %s | %s",
                String.valueOf(java.time.LocalDateTime.now()), type, message, status));
    }

    public static void takeScreenshot(WebDriver driver, String screenshotType, String description) {
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION - Implement method using below steps
        /*
         * 1. Check if the folder "/screenshots" exists, create if it doesn't 
         * 2. Generate a unique string using the timestamp 
         * 3. Capture screenshot 
         * 4. Save the screenshot inside the
         * "/screenshots" folder using the following naming convention:
         * screenshot_<Timestamp>_<ScreenshotType>_<Description>.png eg:
         * screenshot_2022-03-05T06:59:46.015489_StartTestcase_Testcase01.png
         */

         try{

            File theDir = new File("/screenshots");
            if(!theDir.exists()){
                theDir.mkdir();
            }
            String timeStamp = String.valueOf(java.time.LocalDateTime.now().getSecond());
            String fileName = String.format("screenshot_%s_%s_%s.png", timeStamp, screenshotType, description);
            TakesScreenshot scrShot = ((TakesScreenshot)driver);
            File srcFile = scrShot.getScreenshotAs(OutputType.FILE);

            File destFile = new File("screenshots/"+fileName);
            FileUtils.copyFile(srcFile, destFile);

         }catch(Exception e){
            e.printStackTrace();
         }
    }

    /*
     * Testcase01: Verify the functionality of Login button on the Home page
     */
    public static Boolean TestCase01(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        logStatus("Start TestCase", "Test Case 1: Verify User Registration", "DONE");

        // Visit the Registration page and register a new user
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 1", "Test Case Pass. User Registration Pass",
                    status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 1: Verify user Registration : ",
                    status ? "PASS" : "FAIL");

            // Return False as the test case Fails
            return status;
        } else {
            logStatus("TestCase 1", "Test Case Pass. User Registration Pass",
                    status ? "PASS" : "FAIL");
        }

        // Save the last generated username
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Visit the login page and login with the previuosly registered user
        Login login = new Login(driver);
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        logStatus("Test Step", "User Perform Login: ", status ? "PASS" : "FAIL");
        if (!status) {
            logStatus("End TestCase", "Test Case 1: Verify user Registration : ",
                    status ? "PASS" : "FAIL");
            return false;
        } else {
            logStatus("TestCase 1", "Test Case Pass. User Login Pass? ",
                    status ? "PASS" : "FAIL");
        }

        // Visit the home page and log out the logged in user
        Home home = new Home(driver);
        status = home.PerformLogout();
        logStatus("End TestCase", "Test Case 1: Verify user Logout : ",
                status ? "PASS" : "FAIL");

        return status;
    }

    /*
     * Verify that an existing user is not allowed to re-register on QKart
     */
    public static Boolean TestCase02(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        logStatus("Start Testcase",
                "Test Case 2: Verify User Registration with an existing username ", "DONE");

        // Visit the Registration page and register a new user
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        logStatus("Test Step", "User Registration : ", status ? "PASS" : "FAIL");
        if (!status) {
            logStatus("End TestCase", "Test Case 2: Verify user Registration : ",
                    status ? "PASS" : "FAIL");
            return false;

        }

        // Save the last generated username
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Visit the Registration page and try to register using the previously
        // registered user's credentials
        registration.navigateToRegisterPage();
        status = registration.registerUser(lastGeneratedUserName, "abc@123", false);
        // If status is true, then registration succeeded, else registration has
        // failed. In this case registration failure means Success
        if (!status) {
        logStatus("End TestCase", "Test Case 2: Verify user Registration : ",
                status ? "FAIL" : "PASS");
                return true;
        }
        return status;
    }

    /*
     * Verify the functinality of the search text box
     */
    public static Boolean TestCase03(RemoteWebDriver driver) throws InterruptedException {
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        logStatus("TestCase 3", "Start test case : Verify functionality of search box ", "DONE");
        boolean status;

        // Visit the home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // SLEEP_STMT_01 : Wait for Page to Load
        //WebDriverWait wait = new WebDriverWait(driver, 10);
        //wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[text()='2']")));
        
        // Search for the "yonex" product
        status = homePage.searchForProduct("yonex");
        Thread.sleep(2000);
        if (!status) {
            logStatus("TestCase 3", "Test Case Failure. Unable to search for given product",
                    "FAIL");
            return false;
        }

        // Fetch the search results
        List<WebElement> searchResults = homePage.getSearchResults();
        Thread.sleep(1000);
        // Verify the search results are available
        if (searchResults.size() == 0) {
            logStatus("TestCase 3",
                    "Test Case Failure. There were no results for the given search string", "FAIL");
            return false;
        }

        for (WebElement webElement : searchResults) {
            // Create a SearchResult object from the parent element
            SearchResult resultelement = new SearchResult(webElement);

            // Verify that all results contain the searched text
            String elementText = resultelement.getTitleofResult();
            if (!elementText.toUpperCase().contains("YONEX")) {
                logStatus("TestCase 3",
                        "Test Case Failure. Test Results contains un-expected values: "
                                + elementText,
                        "FAIL");
                return false;
            }
        }

        logStatus("Step Success", "Successfully validated the search results ", "PASS");
        // SLEEP_STMT_02
        //Thread.sleep(2000);
        WebDriverWait wait = new WebDriverWait(driver, 10);
        wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[text()='Add to cart']")));

        // Search for product
        status = homePage.searchForProduct("Gesundheit");
        if (!status) {
            logStatus("TestCase 3", "Test Case Failure. Unable to search for given product",
                    "FAIL");
            return false;
        }

        Thread.sleep(1000);
        // Verify no search results are found
        searchResults = homePage.getSearchResults();
       
        if (searchResults.size() == 0) {
            if (homePage.isNoResultFound()) {
                logStatus("Step Success",
                        "Successfully validated that no products found message is displayed",
                        "PASS");
            }
            logStatus("TestCase 3",
                    "Test Case PASS. Verified that no search results were found for the given text",
                    "PASS");
        } else {
            logStatus("TestCase 3",
                    "Test Case Fail. Expected: no results , actual: Results were available",
                    "FAIL");
            return false;
        }

        return true;
    }

    /*
     * Verify the presence of size chart and check if the size chart content is as expected
     */
    public static Boolean TestCase04(RemoteWebDriver driver) throws InterruptedException {
        logStatus("TestCase 4", "Start test case : Verify the presence of size Chart", "DONE");
        boolean status = false;

        // Visit home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // SLEEP_STMT_03 : Wait for page to load
        Thread.sleep(1000);
        //WebDriverWait wait = new WebDriverWait(driver, 10);
        //wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[text()='2']")));

        // Search for product and get card content element of search results
        status = homePage.searchForProduct("Running Shoes");
        Thread.sleep(1000);
        List<WebElement> searchResults = homePage.getSearchResults();

        //Thread.sleep(5000);
        // Create expected values
        List<String> expectedTableHeaders = Arrays.asList("Size", "UK/INDIA", "EU", "HEEL TO TOE");
        List<List<String>> expectedTableBody = Arrays.asList(Arrays.asList("6", "6", "40", "9.8"),
                Arrays.asList("7", "7", "41", "10.2"), Arrays.asList("8", "8", "42", "10.6"),
                Arrays.asList("9", "9", "43", "11"), Arrays.asList("10", "10", "44", "11.5"),
                Arrays.asList("11", "11", "45", "12.2"), Arrays.asList("12", "12", "46", "12.6"));

        Thread.sleep(1000);

        // Verify size chart presence and content matching for each search result
        for (WebElement webElement : searchResults) {
            SearchResult result = new SearchResult(webElement);

            //Thread.sleep(2000);

            // Verify if the size chart exists for the search result
            if (result.verifySizeChartExists()) {
                logStatus("Step Success", "Successfully validated presence of Size Chart Link",
                        "PASS");

                //Thread.sleep(2000);
                // Verify if size dropdown exists
                status = result.verifyExistenceofSizeDropdown(driver);
                logStatus("Step Success", "Validated presence of drop down",
                        status ? "PASS" : "FAIL");

                //Thread.sleep(2000);
                // Open the size chart
                if (result.openSizechart()) {

                    // Verify if the size chart contents matches the expected values
                    if (result.validateSizeChartContents(expectedTableHeaders, expectedTableBody,
                            driver)) {
                        logStatus("Step Success",
                                "Successfully validated contents of Size Chart Link", "PASS");
                    } else {
                        logStatus("Step Failure",
                                "Failure while validating contents of Size Chart Link", "FAIL");
                    }

                    // Close the size chart modal
                    status = result.closeSizeChart(driver);

                } else {
                    logStatus("TestCase 4", "Test Case Fail. Failure to open Size Chart", "FAIL");
                    return false;
                }

            } else {
                logStatus("TestCase 4", "Test Case Fail. Size Chart Link does not exist", "FAIL");
                return false;
            }
        }
        logStatus("TestCase 4", "Test Case PASS. Validated Size Chart Details", "PASS");
        return status;
    }

    /*
     * Verify the complete flow of checking out and placing order for products is working correctly
     */
    public static Boolean TestCase05(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        logStatus("Start TestCase", "Test Case 5: Verify Happy Flow of buying products", "DONE");

        // Go to the Register page
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();

        // Register a new user
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 5", "Test Case Failure. Happy Flow Test Failed", "FAIL");
        }

        // Save the username of the newly registered user
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Go to the login page
        Login login = new Login(driver);
        login.navigateToLoginPage();

        // Login with the newly registered user's credentials
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 5: Happy Flow Test Failed : ",
                    status ? "PASS" : "FAIL");
        }

        // Go to the home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // Find required products by searching and add them to the user's cart
        status = homePage.searchForProduct("Yonex");
        homePage.addProductToCart("YONEX Smash Badminton Racquet");
        status = homePage.searchForProduct("Tan");
        homePage.addProductToCart("Tan Leatherette Weekender Duffle");

        // Click on the checkout button
        homePage.clickCheckout();

        // Add a new address on the Checkout page and select it
        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        // Place the order
        checkoutPage.placeOrder();
        // SLEEP_STMT_04: Wait for place order to succeed and navigate to Thanks page
        //Thread.sleep(3000);
        WebDriverWait wait = new WebDriverWait(driver, 30);
        wait.until(ExpectedConditions.urlContains("/thanks"));

        // Check if placing order redirected to the Thansk page
        status = driver.getCurrentUrl().endsWith("/thanks");

        // Go to the home page
        homePage.navigateToHome();
        //Thread.sleep(3000);

        // Log out the user
        homePage.PerformLogout();

        logStatus("End TestCase", "Test Case 5: Happy Flow Test Completed : ",
                status ? "PASS" : "FAIL");
        return status;
    }

    /*z
     * Verify the quantity of items in cart can be updated
     */
    public static Boolean TestCase06(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        logStatus("Start TestCase", "Test Case 6: Verify that cart can be edited", "DONE");

        /*
         * Home homePage = new Home(driver); Register registration = new Register(driver); Login
         * login = new Login(driver);
         */

        // TODO: CRIO_TASK_MODULE_TEST_AUTOMATION - TEST CASE 06: MILESTONE 5

        // TODO: Register a new user

        // TODO: Login using the newly registed user

        // TODO: Add "Xtend Smart Watch" to cart

        // TODO: Add "Yarine Floor Lamp" to cart

        // Go to the Register page
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();

        // Register a new user
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 6", "Test Case Failure. Happy Flow Test Failed", "FAIL");
        }

        // Save the username of the newly registered user
        lastGeneratedUserName = registration.lastGeneratedUsername;


        // Go to the login page
        Login login = new Login(driver);
        login.navigateToLoginPage();

        // Login with the newly registered user's credentials
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 5: Happy Flow Test Failed : ",
                    status ? "PASS" : "FAIL");
        }

        // Go to the home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        Thread.sleep(1000);
        status = homePage.searchForProduct("Watch");
        homePage.addProductToCart("Xtend Smart Watch");
        status = homePage.searchForProduct("lamp");
        homePage.addProductToCart("Yarine Floor Lamp");

        // update watch quantity to 2
        homePage.changeProductQuantityinCart("Xtend Smart Watch", 2);

        // update table lamp quantity to 0
        homePage.changeProductQuantityinCart("Yarine Floor Lamp", 0);

        // update watch quantity again to 1
        homePage.changeProductQuantityinCart("Xtend Smart Watch", 1);

        homePage.clickCheckout();

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        checkoutPage.placeOrder();
        WebDriverWait wait = new WebDriverWait(driver, 30);
        wait.until(ExpectedConditions.urlContains("/thanks"));

        status = driver.getCurrentUrl().endsWith("/thanks");

        if(status){
            homePage.navigateToHome();

            homePage.PerformLogout();

            logStatus("End TestCase", "Test Case 6: Verify that cart can be edited: ",
                status ? "PASS" : "FAIL");

            return status;
        }
        
        return status;
    }

    /*
     * Verify that the cart contents are persisted after logout
     */
    public static Boolean TestCase07(RemoteWebDriver driver) throws InterruptedException {
        Boolean status = false;
        List<String> expectedResult =
                Arrays.asList("Stylecon 9 Seater RHS Sofa Set", "Xtend Smart Watch");

        logStatus("Start TestCase",
                "Test Case 7: Verify that cart contents are persisted after logout", "DONE");


        Register registration = new Register(driver);
        Login login = new Login(driver);
        Home homePage = new Home(driver);

        // TODO: CRIO_TASK_MODULE_TEST_AUTOMATION - TEST CASE 07: MILESTONE 6
        // TODO: Register a new user

        // TODO: Login using the newly created user

        // Go to the Register page
        // Register registration = new Register(driver);
        registration.navigateToRegisterPage();

        // Register a new user
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 7", "Test Case Failure. Happy Flow Test Failed", "FAIL");
        }

        // Save the username of the newly registered user
        lastGeneratedUserName = registration.lastGeneratedUsername;


        // Go to the login page
        login.navigateToLoginPage();

        // Login with the newly registered user's credentials
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 5: Happy Flow Test Failed : ",
                    status ? "PASS" : "FAIL");
        }

        // Go to the home page
        // Home homePage = new Home(driver);
        homePage.navigateToHome();

        // List<String> productsInCart = new ArrayList<>();

        homePage.navigateToHome();
        status = homePage.searchForProduct("Stylecon");
        homePage.addProductToCart("Stylecon 9 Seater RHS Sofa Set ");


        status = homePage.searchForProduct("Xtend");
        homePage.addProductToCart("Xtend Smart Watch");


        homePage.PerformLogout();

        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        //Thread.sleep(3000);

        status = homePage.verifyCartContents(expectedResult);

        logStatus("End TestCase",
                "Test Case 7: Verify that cart contents are persisted after logout: ",
                status ? "PASS" : "FAIL");

        homePage.PerformLogout();
        return status;
    }

    public static Boolean TestCase08(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        logStatus("Start TestCase",
                "Test Case 8: Verify that insufficient balance error is thrown when the wallet balance is not enough",
                "DONE");

        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("Step Failure", "User Perform Registration Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase",
                    "Test Case 8: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                    status ? "PASS" : "FAIL");
            return false;
        }
        lastGeneratedUserName = registration.lastGeneratedUsername;

        Login login = new Login(driver);
        login.navigateToLoginPage();
        Thread.sleep(1000);
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase",
                    "Test Case 8: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                    status ? "PASS" : "FAIL");
            return false;
        }

        Home homePage = new Home(driver);
        homePage.navigateToHome();
        status = homePage.searchForProduct("Stylecon");
        homePage.addProductToCart("Stylecon 9 Seater RHS Sofa Set ");
        //Thread.sleep(3000);

        homePage.changeProductQuantityinCart("Stylecon 9 Seater RHS Sofa Set ", 10);

        homePage.clickCheckout();

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        checkoutPage.placeOrder();
        //Thread.sleep(3000);

        WebDriverWait wait = new WebDriverWait(driver, 10);
        wait.until(ExpectedConditions.visibilityOfElementLocated((By.xpath(
                "//*[text()='You do not have enough balance in your wallet for this purchase']"))));

        status = checkoutPage.verifyInsufficientBalanceMessage();

        logStatus("End TestCase",
                "Test Case 8: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                status ? "PASS" : "FAIL");

        return status;
    }

    public static Boolean TestCase09(RemoteWebDriver driver) throws InterruptedException {
        Boolean status = false;
        logStatus("Start TestCase",
                "Test Case 9: Verify that the cart contains the product that was added in the previous login.", "DONE");
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 9", "Test Case Pass. User Registration Pass",
                    status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 1: Verify user Registration : ",
                    status ? "PASS" : "FAIL");

            // Return False as the test case Fails
            return false;
        } else {
            logStatus("TestCase 9", "Test Case Pass. User Registration Pass",
                    status ? "PASS" : "FAIL");
        }

        // Save the last generated username
        lastGeneratedUserName = registration.lastGeneratedUsername;

        Login login = new Login(driver);
        login.navigateToLoginPage();
        Thread.sleep(1000);
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            return false;
        }

        Home homePage = new Home(driver);
        status = homePage.searchForProduct("YONEX");
        homePage.addProductToCart("YONEX Smash Badminton Racquet");

        //driver.switchTo().newWindow(WindowType.WINDOW);

        ((JavascriptExecutor)driver).executeScript("window.open()");
        String parent = driver.getWindowHandle();

        ArrayList<String> tabs = new ArrayList<>(driver.getWindowHandles());
        driver.switchTo().window(tabs.get(1));
        homePage.navigateToHome();

        if((driver.findElement(By.xpath("//*[@class='cart MuiBox-root css-0']//*[text()='YONEX Smash Badminton Racquet']")).getText()).equals("YONEX Smash Badminton Racquet")){
            driver.close();
            driver.switchTo().window(parent);
            //driver.close();
            logStatus("End TestCase",
            "Test Case 9: The cart contains the product that was added in the previous login: ", "PASS");
            
            return true;
        }

        return status;
    }

    public static Boolean TestCase10(RemoteWebDriver driver) throws InterruptedException {
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -
        Boolean status = false;
        logStatus("Start TestCase",
                "Test Case 10: Verify that the Privacy Policy page can be opened",
                "DONE");

        Home homePage = new Home(driver);
        //driver.close();
        homePage.navigateToHome();
        
        String url = driver.getCurrentUrl();
        String parent = driver.getWindowHandle();

        Thread.sleep(2000);
        driver.findElement(By.xpath("//*[text()='Privacy policy']")).click();
        if(url.equalsIgnoreCase(driver.getCurrentUrl())){
            status = true;
        }else{
            status = false;
        }

        Set<String> allWindows = driver.getWindowHandles();
        for(String window : allWindows){

            if(!window.equalsIgnoreCase(parent)){
                driver.switchTo().window(window);
            if(driver.findElement(By.xpath("//h2")).getText().equalsIgnoreCase("Privacy policy")){
                logStatus("TestCase",
            "Test Case 10: The Privacy policy page can be opened and closed: ", "PASS");
                status = true;
            }else{
                status = false;
            }
            driver.close();
            }

        }
        driver.switchTo().window(parent);
        driver.findElement(By.xpath("//*[text()='Terms of Service']")).click();
        if(url.equalsIgnoreCase(driver.getCurrentUrl())){
            status = true;
        }else{
            status = false;
        }

        Set<String> allWindows1 = driver.getWindowHandles();
        for(String window : allWindows1){

            if(!window.equalsIgnoreCase(parent)){
                driver.switchTo().window(window);
            if(driver.findElement(By.xpath("//h2")).getText().equalsIgnoreCase("Terms of Service")){
                logStatus("TestCase",
            "Test Case 10: The Terms of Service page can be opened and closed: ", "PASS");
                status = true;
            }else{
                status = false;
            }
            driver.close();
            driver.switchTo().window(parent);
            }

        }
        if(status){
            logStatus("End TestCase",
            "Test Case 10: The Privacy Policy & Terms of Service pages can be opened: ", "PASS");
            return status;
        }
        logStatus("End TestCase",
        "Test Case 10: The Privacy Policy & Terms of Service pages can be opened: ", "FAIL");
    return !status;
}

    public static Boolean TestCase11(RemoteWebDriver driver) throws InterruptedException {
        Boolean status = false;
        logStatus("Start TestCase",
                "Test Case 11: Verify that the message can be entered",
                "DONE");

        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -
        Home homePage = new Home(driver);
        homePage.navigateToHome();
        Thread.sleep(2000);

        //Click on the Contact us hyperlink
        driver.findElement(By.xpath("//*[text()='Contact us']")).click();

        //Enter name
        driver.findElement(By.xpath("//*[@placeholder='Name']")).sendKeys("crio user");

        //Enter email
        driver.findElement(By.xpath("//*[@placeholder='Email']")).sendKeys("criouser@gmail.com");

        //Enter Message
        driver.findElement(By.xpath("//*[@placeholder='Message']")).sendKeys("Testing the contact us page");

        //Click on Contact Now button
        driver.findElement(By.xpath("//button[text()=' Contact Now']")).click();

        WebDriverWait wait = new WebDriverWait(driver, 5);
        wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[text()='Contact us']")));
        if(driver.findElement(By.xpath("//*[text()='Contact us']")).isDisplayed()){
            //System.out.println(status);
            logStatus("End TestCase", "Test Case 11: The message can be entered: ", "PASS");
            return (!status);
        }
        
        return status;
    }

    public static Boolean TestCase12(RemoteWebDriver driver) throws InterruptedException {
        Boolean status = false;
        logStatus("Start TestCase",
        "Test Case 12: Verify that the frames are present on the order placed page",
        "DONE");

        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();

        // Register a new user
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 12", "Test Case Failure. Happy Flow Test Failed", "FAIL");
        }

        // Save the username of the newly registered user
        lastGeneratedUserName = registration.lastGeneratedUsername;


        // Go to the login page
        Login login = new Login(driver);
        login.navigateToLoginPage();

        // Login with the newly registered user's credentials
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 5: Happy Flow Test Failed : ",
                    status ? "PASS" : "FAIL");
        }

        // Go to the home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        status = homePage.searchForProduct("YONEX Smash Badminton Racquet");
        homePage.addProductToCart("YONEX Smash Badminton Racquet");

        homePage.clickCheckout();

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        checkoutPage.placeOrder();

        WebDriverWait wait = new WebDriverWait(driver, 5);
        wait.until(ExpectedConditions.urlContains("/thanks"));

        ArrayList<WebElement> ad = new ArrayList<>(driver.findElements(By.tagName("iframe")));

        driver.switchTo().frame(0);
        boolean adbutton1 = driver.findElement(By.xpath("(//button)[1]")).isEnabled();
        boolean adbutton2 = driver.findElement(By.xpath("(//button)[2]")).isEnabled();
        driver.switchTo().parentFrame();

        driver.switchTo().frame(1);
        boolean adbutton3 = driver.findElement(By.xpath("(//button)[1]")).isEnabled();
        boolean adbutton4 = driver.findElement(By.xpath("(//button)[2]")).isEnabled();
        driver.switchTo().parentFrame();
        
        if(ad.size() == 3 & adbutton1 & adbutton2 & adbutton3 & adbutton4){
            logStatus("End TestCase",
            "Test Case 12: The frames are present on the order placed page : ", "PASS");
            return status;
        }

        return status;
    }

    public static void main(String[] args) throws InterruptedException, MalformedURLException {
        int totalTests = 0;
        int passedTests = 0;
        Boolean status;
        RemoteWebDriver driver = createDriver();
        // Maximize and Implicit Wait for things to initailize
        driver.manage().window().maximize();
        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

        try {
           // Execute Test Case 1
           totalTests += 1;
            status = TestCase01(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 2
            totalTests += 1;
            status = TestCase02(driver);
            if (status) {
                passedTests += 1;
            }
            
            System.out.println("");

            // Execute Test Case 3
            totalTests += 1;
            status = TestCase03(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 4
            totalTests += 1;
            status = TestCase04(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

           // Execute Test Case 5
            totalTests += 1;
            status = TestCase05(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 6
            totalTests += 1;
            status = TestCase06(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 7
            totalTests += 1;
            status = TestCase07(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");
            
            // Execute Test Case 8
            totalTests += 1;
            status = TestCase08(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 9
            totalTests += 1;
            status = TestCase09(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 10
            totalTests += 1;
            status = TestCase10(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 11
            totalTests += 1;
            status = TestCase11(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 12
            totalTests += 1;
            status = TestCase12(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

        } catch (Exception e) {
            throw e;
        } finally {
            // quit Chrome Driver
            driver.quit();

            System.out.println(String.format("%s out of %s test cases Passed ",
                    Integer.toString(passedTests), Integer.toString(totalTests)));
        }

    }
}
